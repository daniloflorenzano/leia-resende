@page "/"
@using Core.News
@using System.Linq;
@rendermode InteractiveServer
@inject GetNews getNews;

<PageTitle>Página inicial - Todas as Notícias</PageTitle>

<div class="container">
    <div class="text-center mt-4 mb-4">
        <h1 class="site-title">
            Leia Resende
            <i class="bi bi-brightness-high-fill theme-toggle" id="themeIcon" onclick="toggleTheme()" style="cursor: pointer;"></i>
        </h1>
        <p class="site-subtitle">Agregador de notícias</p>
    </div>
    
    
    
    @if (news != null)
    {
        <div class="topics-header d-flex justify-content-center flex-wrap mb-4">
            <button class="topic-btn" @onclick="@SetSubjectAsNull">Todas</button>
            @if (news != null && SubjectDict != null)
            {
                @foreach (var subject in SubjectDict)
                {
                    <button class="topic-btn" @onclick="@(() => SetSubject(subject.Key))">
                        @subject.Value
                    </button>
                }
            }
        </div>

        <div class="news-grid">
            @foreach (var group in news.GroupBy(n => n.Subject))
            {
                <h2 class="news-section-title">@group.Key</h2>

                <div class="row">
                    @foreach (var item in group.OrderByDescending(n => n.PublishedAt).DistinctBy(n => n.Title))
                    {
                        <div class="col-md-4 mb-3">
                            <div class="news-card">
                                <NewsCard news="@item"/>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-center">Carregando...</p>
    }

</div>

<footer class="footer">
    <p>© 2024 Leia Resende - Todos os direitos reservados.</p>
</footer>

<style>
    body {
        transition: background-color 0.5s, color 0.5s;
    }

    .dark-theme {
        background-color: #1a1a1a;
        color: #f0f0f0;
    }

    .container {
        padding: 0 2rem;
    }

    .site-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        color: #333;
        transition: color 0.3s;
    }

    .dark-theme .site-title {
        color: #f0f0f0;
    }

    .site-subtitle {
        font-size: 1.2rem;
        color: #666;
    }
    
    .topics-header {
        margin-bottom: 2rem;
    }

    .topic-btn {
        padding: 0.5rem 1rem;
        margin: 0.5rem;
        background-color: #007bff;
        color: white;
        border-radius: 20px;
        text-decoration: none;
        transition: background-color 0.3s, transform 0.3s;
    }

    .topic-btn:hover {
        background-color: #0056b3;
        transform: scale(1.05);
    }

    .dark-theme .topic-btn {
        background-color: #555;
    }

    .news-grid {
        margin-top: 2rem;
    }

    .news-section-title {
        font-size: 2rem;
        color: #007bff;
        margin-top: 2rem;
    }

    .news-card {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 1rem; 
        transition: transform 0.3s, box-shadow 0.3s;
        height: 100%; 
        display: flex;
        flex-direction: column;
        justify-content: space-between; 
    }

    .news-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .dark-theme .news-card {
        background-color: #333;
    }

    .theme-toggle {
        font-size: 1.5rem;
        margin-left: 0.5rem;
        cursor: pointer;
    }

    .footer {
        text-align: center;
        margin-top: 3rem;
        padding: 2rem 0;
        background-color: #f8f9fa;
        border-top: 1px solid #e9ecef;
    }

    .dark-theme .footer {
        background-color: #222;
        color: #aaa;
    }
</style>

<script>
    function applySavedTheme() {
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme === "dark") {
            document.body.classList.add("dark-theme");
            document.getElementById("themeIcon").classList.remove("bi-brightness-high-fill");
            document.getElementById("themeIcon").classList.add("bi-moon");
        }
    }

    function toggleTheme() {
        const body = document.body;
        body.classList.toggle("dark-theme");

        const icon = document.getElementById("themeIcon");
        if (body.classList.contains("dark-theme")) {
            icon.classList.remove("bi-brightness-high-fill");
            icon.classList.add("bi-moon");
            localStorage.setItem("theme", "dark");
        } else {
            icon.classList.remove("bi-moon");
            icon.classList.add("bi-brightness-high-fill");
            localStorage.setItem("theme", "light");
        }
    }

    document.addEventListener("DOMContentLoaded", applySavedTheme);
</script>

@code {
    private IEnumerable<News>? news;
    private Dictionary<SubjectEnum, string>? SubjectDict;
    private SubjectEnum? selectedSubject = null;

    protected override async Task OnInitializedAsync()
    {
        if (news is null)
        {
            var result = await getNews.Handle();
            if (result is not null)
            {
                news = result;
                LoadSubjectDict();
            }
        }
    }

    private void LoadSubjectDict(){
        if (news != null)
        {
            SubjectDict = news
            .GroupBy(n => n.Subject)
            .ToDictionary(g => g.Key, g => g.First().GetSubjectInPtBr());
        }
    }

    private async Task SetSubject(SubjectEnum subject)
    {
        selectedSubject = subject;
        await UpdateNews();
    }

    private async Task SetSubjectAsNull()
    {
        selectedSubject = null;
        await UpdateNews();
    }

    private async Task UpdateNews()
    {
        if (selectedSubject is not null)
        {
            news = news!.Where(n => n.Subject == selectedSubject);
        }
        else
        {
            var result = await getNews.Handle();
            if (result is not null)
            {
                news = result;
            }
        }
    }
}