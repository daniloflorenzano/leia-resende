@page "/{pagination:int?}"
@inject IJSRuntime JSRuntime
@using Core.News
@using System.Linq;
@using Core.Application
@using Core.Application.Extensions
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject GetNews getNews;

<PageTitle>Página inicial - Todas as Notícias</PageTitle>

<div class="container">
    <Modal @ref="_modal" IsVerticallyCentered="true" IsScrollable="true" Size="ModalSize.Large"  class="news-modal">
        <HeaderTemplate>
            <div class="modal-header border-0 pb-0">
                <NewsSujectBadge news="@_newsItem"/>
                <CloseButton OnClick="OnHideModalClick"/>
            </div>
        </HeaderTemplate>
        <BodyTemplate>
            <div class="modal-body">
                @if (_newsItem!.ImageUrl is not null)
                {
                    <img src="@_newsItem.ImageUrl" class="img-fluid rounded mb-3" alt="@_newsItem.Title"/>
                }

                <h2 class="mb-4">@_newsItem.Title</h2>

                <div class="d-flex align-items-center mb-4">
                    @if (_newsItem.AuthorIconUrl is not null)
                    {
                        <img src="@_newsItem.AuthorIconUrl" class="rounded-circle me-2" style="width: 40px; height: 40px;" alt="@_newsItem.Author"/>
                    }
                    <div>
                        <div class="fw-bold">@_newsItem.Author</div>
                        <small class="text-muted">@_newsItem.PublishedAt.ToString("dd/MM/yyyy")</small>
                    </div>
                </div>

                <div class="content mb-4">
                    @((MarkupString)FormatContent(_newsItem.Content))
                </div>


                <div class="text-end">
                    <a href="@_newsItem.OriginalUrl" target="_blank" class="btn btn-link">
                        Ler notícia original
                        <i class="bi bi-box-arrow-up-right ms-1"></i>
                    </a>
                </div>

            </div>
        </BodyTemplate>
        <FooterTemplate>
            <div class="modal-footer border-0">
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Fechar</Button>
                <Button Color="ButtonColor.Primary" @onclick="ShareNews">
                    <i class="bi bi-share me-1"></i>
                    Compartilhar
                </Button>
            </div>
        </FooterTemplate>
    </Modal>


    <div class="text-center mt-4 mb-4">
        <h1 class="site-title">
            Leia Resende
            <i class="bi bi-brightness-high-fill theme-toggle" id="themeIcon" onclick="toggleTheme()" style="cursor: pointer;"></i>
        </h1>
        <p class="site-subtitle">Agregador de notícias</p>
    </div>


    @if (news != null)
    {
        <div class="topics-header d-flex justify-content-center flex-wrap mb-4">
            <div class="col-12 col-md-8 col-lg-6">
                <NewsFilter
                    SelectedSubject="@selectedSubject"
                    SelectedSubjectChanged="@(subject => HandleSubjectChange(subject))"
                    SubjectDict="@SubjectDict"
                    OnSearch="@HandleSearch"/>
            </div>
        </div>

        <div class="d-flex flex-wrap justify-content-start gap-4">
            @foreach (var item in news.OrderByDescending(n => n.PublishedAt).DistinctBy(n => n.Title))
            {
                <div class="col-md-3" style="max-width: 21rem; min-width: 16rem">
                    <div class="news-card" @onclick="() => OnShowModalClick(item)">
                        <NewsCard news="@item"/>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-center">Carregando...</p>
    }

</div>

<footer class="footer">
    <p>© 2024 Leia Resende - Todos os direitos reservados.</p>
</footer>

<style>
    body {
        transition: background-color 0.5s, color 0.5s;
    }

    .dark-theme {
        background-color: #0e1217;
        color: #f0f0f0;
    }

    .container {
        padding: 0 2rem;
        max-width: 1860px;
    }

    .site-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        color: #333;
        transition: color 0.3s;
    }

    .dark-theme .site-title {
        color: #f0f0f0;
    }

    .site-subtitle {
        font-size: 1.2rem;
        color: #666;
    }
    
    .topics-header {
        margin-bottom: 2rem;
    }

    .topic-btn {
        padding: 0.5rem 1rem;
        margin: 0.5rem;
        background-color: #007bff;
        color: white;
        border-radius: 20px;
        text-decoration: none;
        transition: background-color 0.3s, transform 0.3s;
    }

    .topic-btn:hover {
        background-color: #0056b3;
        transform: scale(1.05);
    }

    .dark-theme .topic-btn {
        background-color: #555;
    }

    .news-card {
        background-color: white;
        border-radius: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
        height: 100%;
    }
    
    .news-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        cursor: pointer;
    }

    .dark-theme .news-card .card {
        background-color: #1c1f26;
        color: #f0f0f0;
    }
    
    .theme-toggle {
        font-size: 1.5rem;
        margin-left: 0.5rem;
        cursor: pointer;
    }

    .footer {
        text-align: center;
        margin-top: 3rem;
        padding: 2rem 0;
        background-color: #f8f9fa;
        border-top: 1px solid #e9ecef;
    }

    .dark-theme .footer {
        background-color: #222;
        color: #aaa;
    }
    
    .dark-theme .modal-content {
        background-color: #1c1f26;
        color: #f0f0f0;
    }
</style>

<script>
    function applySavedTheme() {
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme === "dark") {
            document.body.classList.add("dark-theme");
            document.getElementById("themeIcon").classList.remove("bi-brightness-high-fill");
            document.getElementById("themeIcon").classList.add("bi-moon");
        }
    }

    function toggleTheme() {
        const body = document.body;
        body.classList.toggle("dark-theme");

        const icon = document.getElementById("themeIcon");
        if (body.classList.contains("dark-theme")) {
            icon.classList.remove("bi-brightness-high-fill");
            icon.classList.add("bi-moon");
            localStorage.setItem("theme", "dark");
        } else {
            icon.classList.remove("bi-moon");
            icon.classList.add("bi-brightness-high-fill");
            localStorage.setItem("theme", "light");
        }
    }

    document.addEventListener("DOMContentLoaded", applySavedTheme);


    function copyLink(link) {
        navigator.clipboard.writeText(link).then(function() {
            Toastify({
                text: "Link copiado com sucesso!",
                duration: 3000,
                close: true,
                gravity: "top",
                position: "right",
                backgroundColor: "#4CAF50",
                stopOnFocus: true,
            }).showToast();
        }, function(err) {
            Toastify({
                text: "Erro ao copiar o link!",
                duration: 3000,
                close: true,
                gravity: "top",
                position: "right",
                backgroundColor: "#f44336",
                stopOnFocus: true,
            }).showToast();
        });
    }
</script>

@code {
    [Parameter] public int pagination { get; set; }
    private IEnumerable<News>? news;
    private Dictionary<SubjectEnum, string>? SubjectDict;
    private SubjectEnum? selectedSubject = null;

    protected override async Task OnInitializedAsync()
    {
        if (news is null)
        {
            var filter = new SearchFilter()
                .WithPagination(pagination, 20)
                .WithOrderByDesc(n => n.PublishedAt);
            
            var result = await getNews.Handle(filter);
            news = result;
            LoadSubjectDict();
        }
        
        try
        {
            await JSRuntime.InvokeVoidAsync("applySavedTheme");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao aplicar tema salvo: {ex.Message}");
        }
    }


    private void LoadSubjectDict()
    {
        if (news != null)
        {
            SubjectDict = news
                .GroupBy(n => n.Subject)
                .ToDictionary(g => g.Key, g => g.First().GetSubjectInPtBr());
        }
    }

    private async Task HandleSubjectChange(SubjectEnum? subject)
    {
        selectedSubject = subject;
        await FilterNews();
    }

    private async Task HandleSearch(string searchText)
    {
        await FilterNews(searchText);
    }

    private async Task FilterNews(string? searchText = null)
    {
        if (selectedSubject is not null)
            news = news!.Where(n => n.Subject == selectedSubject);
        
        if (!string.IsNullOrEmpty(searchText))
            news = news!.Where(n => n.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        
        if (selectedSubject is null && string.IsNullOrEmpty(searchText))
        {
            var result = await getNews.Handle();
            news = result;
        }
    }


    private Modal _modal = default!;
    private News? _newsItem;

    private async Task OnShowModalClick(News news)
    {
        _newsItem = news;
        await _modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await _modal.HideAsync();
    }

    private string FormatContent(string content) => content.Replace("\n", "<br>");

    private async Task ShareNews()
    {
        if (_newsItem is not null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("copyLink", _newsItem.OriginalUrl.ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao compartilhar: {ex.Message}");
            }
        }
    }


}