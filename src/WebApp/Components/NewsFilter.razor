@using Core.News

<div class="filter-container mb-4 px-3">
    <div class="row g-3">
        <!-- Search Bar -->
        <div class="col-12">
            <div class="search-container">
                <div class="input-group">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="bi bi-search text-muted"></i>
                    </span>
                    <input
                        type="text"
                        class="form-control border-start-0"
                        placeholder="Buscar notÃ­cias..."
                        @bind-value="_searchText"
                        @bind-value:event="oninput"
                        @onkeyup="HandleSearch"/>
                    @if (!string.IsNullOrEmpty(_searchText))
                    {
                        <button class="btn btn-outline-secondary border-start-0" @onclick="ClearSearch">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    }
                </div>
            </div>
        </div>

        <!-- Mobile Category Dropdown -->
        <div class="col-12 d-md-none">
            <div class="dropdown w-100">
                <button class="btn btn-light dropdown-toggle w-100 d-flex justify-content-between align-items-center"
                        type="button"
                        @onclick="ToggleDropdown">
                    <span>
                        <i class="bi bi-filter me-2"></i>
                        @(SelectedSubject == null ? "Todas as Categorias" : SubjectDict![SelectedSubject.Value])
                    </span>
                </button>
                <div class="dropdown-menu w-100 @(_isDropdownOpen ? "show" : "")" @onclick:stopPropagation="true">
                    <button class="dropdown-item @(SelectedSubject == null ? "active" : "")"
                            @onclick="SetSubjectAsNull">
                        Todas as Categorias
                    </button>
                    <div class="dropdown-divider"></div>
                    @if (SubjectDict != null)
                    {
                        @foreach (var subject in SubjectDict)
                        {
                            <button class="dropdown-item @(SelectedSubject == subject.Key ? "active" : "")"
                                    @onclick="@(() => SetSubject(subject.Key))">
                                @subject.Value
                            </button>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Desktop Category Pills -->
    <div class="category-pills mt-3 d-none d-md-block">
        <div class="d-flex flex-wrap gap-2 justify-content-center">
            <button
                class="btn btn-pill @(SelectedSubject == null ? "btn-primary" : "btn-outline-primary")"
                @onclick="SetSubjectAsNull">
                Todas
            </button>
            @if (SubjectDict != null)
            {
                @foreach (var subject in SubjectDict)
                {
                    <button
                        class="btn btn-pill @(SelectedSubject == subject.Key ? "btn-primary" : "btn-outline-primary")"
                        @onclick="@(() => SetSubject(subject.Key))">
                        @subject.Value
                    </button>
                }
            }
        </div>
    </div>

    <!-- Active Filters -->
    @if (!string.IsNullOrEmpty(_searchText) || SelectedSubject != null)
    {
        <div class="active-filters mt-3">
            <div class="d-flex flex-wrap gap-2 align-items-center">
                <small class="text-muted me-2">Filtros ativos:</small>
                @if (!string.IsNullOrEmpty(_searchText))
                {
                    <span class="badge bg-light text-dark d-flex align-items-center">
                        <span class="me-2">@_searchText</span>
                        <button type="button" class="btn-close btn-close-sm" @onclick="ClearSearch"></button>
                    </span>
                }
                @if (SelectedSubject != null && SubjectDict != null)
                {
                    <span class="badge bg-light text-dark d-flex align-items-center">
                        <span class="me-2">@SubjectDict[SelectedSubject.Value]</span>
                        <button type="button" class="btn-close btn-close-sm" @onclick="SetSubjectAsNull"></button>
                    </span>
                }
                <button class="btn btn-link btn-sm p-0" @onclick="ClearAllFilters">Limpar todos</button>
            </div>
        </div>
    }
</div>

@code {
    private string _searchText = string.Empty;
    private Timer? _searchTimer;
    private bool _isDropdownOpen;

    [Parameter] public SubjectEnum? SelectedSubject { get; set; }
    [Parameter] public Dictionary<SubjectEnum, string>? SubjectDict { get; set; }
    [Parameter] public EventCallback<SubjectEnum?> SelectedSubjectChanged { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }

    private void ToggleDropdown()
    {
        _isDropdownOpen = !_isDropdownOpen;
    }

    private async Task SetSubject(SubjectEnum subject)
    {
        SelectedSubject = subject;
        _isDropdownOpen = false;
        await SelectedSubjectChanged.InvokeAsync(subject);
    }

    private async Task SetSubjectAsNull()
    {
        SelectedSubject = null;
        _isDropdownOpen = false;
        await SelectedSubjectChanged.InvokeAsync(null);
    }

    private void HandleSearch()
    {
        _searchTimer?.Dispose();
        _searchTimer = new Timer(async _ =>
        {
        await InvokeAsync(async () => await OnSearch.InvokeAsync(_searchText));
        }, null, 300, Timeout.Infinite);
    }

    private async Task ClearSearch()
    {
        _searchText = string.Empty;
        await OnSearch.InvokeAsync(string.Empty);
    }

    private async Task ClearAllFilters()
    {
        _searchText = string.Empty;
        await OnSearch.InvokeAsync(string.Empty);
        await SelectedSubjectChanged.InvokeAsync(null);
    }

    public void Dispose()
    {
        _searchTimer?.Dispose();
    }
}

<style>
    .btn-pill {
        border-radius: 50px;
        padding: 0.375rem 1rem;
        font-size: 0.875rem;
        transition: all 0.2s;
    }

    .search-container .input-group {
        overflow: hidden;
    }

    .search-container .form-control:focus {
        box-shadow: none;
        border-color: #dee2e6;
    }

    .search-container .input-group-text,
    .search-container .btn {
        background-color: transparent;
    }

    .search-container .btn:hover {
        background-color: #f8f9fa;
    }

    .active-filters .badge {
        padding: 0.5rem 0.75rem;
        font-weight: normal;
    }

    .btn-close-sm {
        font-size: 0.6rem;
        padding: 0.25rem;
    }

    .dropdown-menu {
        max-height: 300px;
        overflow-y: auto;
    }

    /* Mobile optimizations */
    @@media (max-width: 767.98px) {
    .dropdown-menu.show {
        position: absolute;
        width: 100%;
        margin-top: 0.5rem;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .active-filters {
        margin-top: 1rem;
    }

    .active-filters .badge {
        font-size: 0.875rem;
    }
    }
</style>